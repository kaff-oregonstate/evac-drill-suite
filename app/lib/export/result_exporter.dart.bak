import 'dart:io';

import 'package:evac_app/export/encode_files.dart';
import 'package:evac_app/models/drill_result.dart';
import 'package:firebase_storage/firebase_storage.dart' as firebase_storage;
import 'package:path_provider/path_provider.dart';

class ResultExporter {
  String drillID;
  String publicKey;
  DrillResult drillResult;
  String userID;

  ResultExporter({
    required this.drillID,
    required this.publicKey,
    required this.drillResult,
    required this.userID,
  });

  Future<void> export() async {
    // create/get and encode relevant files
    final resultsPlain = await _createJsonFile();
    if (resultsPlain == null) {
      throw Exception('results were not ready to export');
    }
    final resultsCipher = await _encodeFile(publicKey, resultsPlain);

    final gpxFilePaths = drillResult.gpxFilesForExport;
    List<File> gpxCiphers = [];
    for (final gpxFilePath in gpxFilePaths) {
      final gpxFile = File(gpxFilePath);
      gpxCiphers.add(await _encodeFile(publicKey, gpxFile));
    }

    // send them to server
    await _uploadFile(resultsCipher, '/$userID-results.json.enc');
    for (final gpxCipher in gpxCiphers) {
      await _uploadFile(gpxCipher, '/$userID.gpx.enc');
    }
  }

  Future<void> _uploadFile(File file, String filePath, {int? recurs}) async {
    if (recurs != null && recurs >= 3) return;
    final res = await firebase_storage.FirebaseStorage.instance
        .ref()
        .child('DrillResults')
        .child(drillID)
        .child(userID)
        .child(filePath)
        .putFile(file);
    while (res.state == firebase_storage.TaskState.running) {
      // should never get here, buuuuut just in case…
      await Future.delayed(Duration(seconds: 1));
    }
    if (res.state == firebase_storage.TaskState.canceled ||
        res.state == firebase_storage.TaskState.error) {
      // ditto for this, but still…
      await _uploadFile(file, filePath, recurs: 1 + (recurs ?? 0));
    }
  }

  Future<File> _encodeFile(String publicKey, File plaintextFile) async {
    final newFilePath = await EncodeFiles()
        .encodeRSA(filePath: plaintextFile.path, pubKeyString: publicKey);
    return File(newFilePath);
  }

  Future<File?> _createJsonFile() async {
    final directory = await getApplicationDocumentsDirectory();
    var exists = Directory('${directory.path}/jsonFiles/').existsSync();
    if (!exists) {
      Directory('${directory.path}/jsonFiles/').createSync();
    }
    final result = drillResult.exportResultsToJsonString();

    if (result == null) {
      return null;
    }

    // no need to tag with info as it is only a local file
    var file = File('${directory.path}/jsonFiles/results.json');
    if (file.existsSync()) file.deleteSync();

    file.writeAsStringSync(result);
    return file;
  }
}
